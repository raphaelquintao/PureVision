// Drawing mixins

// Solid color image
@function _solid($c) {
  @return linear-gradient(to bottom, $c, $c);
}

// Entries

@mixin entry($t) {
  //
  // Entries drawing function
  //
  // $t: entry type
  //


  @if $t==normal {
    color: $text_color;
    border-color: $entry_border;
    background-color: $entry_bg;

  } @else if $t==focus {
    color: $text_color;
    border-color: $button_border;
    background-color: shade($entry_bg, 1.03);

  } @else if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: transparentize($entry_border, 0.45);
    background-color: transparentize($entry_bg, 0.45);
  }



  @if $t==header-normal {
    color: $header_fg;
    border-color: $header_entry_border;
    background-color: $header_entry_bg;

    image, image:hover {
      color: inherit;
    }
  } @else if $t==header-focus {
    //
    // focused header-bar entry
    //
    color: $selected_fg_color;
    border-color: $header_entry_border;
    //background-color: $highlight_color;
    background-color: darken($header_entry_bg, 2%);

  } @else if $t==header-insensitive {

    color: transparentize($header_fg, 0.45);
    border-color: $header_entry_border;
    background-color: transparentize($header_entry_bg, 0.15);
  }



  @if $t==osd {
    //
    // normal osd entry
    //
    color: $osd_fg_color;
    border-color: $osd_entry_border;
    background-color: $osd_entry_bg;

    image, image:hover {
      color: inherit;
    }
  } @else if $t==osd-focus {
    //
    // active osd entry
    //
    color: $selected_fg_color;
    border-color: $osd_entry_border;
    background-color: lighten($osd_entry_bg, 3%);
  } @else if $t==osd-insensitive {
    //
    // insensitive osd entry
    //
    color: transparentize($osd_fg_color, 0.45);
    background-color: transparentize($osd_entry_bg, 0.15);
  }


}




//region Button

@mixin button($t, $actionb_bg:red, $actionb_fg: green) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $actionb_bg, $actionb_fg: used for destructive and suggested action buttons


  //region -- Default

  @if $t==normal {
    color: $fg_color;
    border-color: $button_border;
    background-color: $button_bg;

  } @else if $t==hover {
    color: $fg_color;
    border-color: $button_border;
    //background-color: lighten($button_bg, 5%);
    background-color: shade($button_bg, 1.05);
  } @else if $t==active {
    color: $selected_fg_color;
    border-color: $button_border;
    //background-color: lighten($button_border, 5%);
    background-color: shade($button_bg, 0.5);

  } @else if $t==insensitive {
    label, & {
      color: $insensitive_fg_color;
    }
    border-color: transparentize($button_border, 0.45);
    background-color: transparentize($button_bg, 0.45);

  } @else if $t==insensitive-active {
    label, & {
      color: transparentize($selected_fg_color, 0.5);
    }

    border-color: transparentize($button_border, 0.4);
    background-color: transparentize(shade($button_bg, 0.5), 0.4);
  }
  //endregion


  //region -- HEADER

  @if $t==header-normal {
    //
    // normal header-bar button
    //
    color: $header_fg;
    outline-offset: -3px;
    background-color: transparentize($header_bg, 1);
    border-color: transparentize($header_bg, 1);

    //background-color: shade($header_button_bg, 1.05);
    //border-color: $header_button_border;
  } @else if $t==header-hover {
    //
    // hovered header-bar button
    //
    color: $selected_fg_color;
    border-color: $header_button_border;
    background-color: shade($header_button_bg, 1.05);
  } @else if $t==header-active {
    //
    // pushed header-bar button
    //
    color: $selected_fg_color;
    //border-color: if($darker=='false' and $variant=='light', $highlight_color, transparent);
    //background-color: $highlight_color;
    border-color: $header_button_border;
    background-color: shade($header_button_bg, 0.5);
    //text-shadow: 1px 1px 1px  $header_button_border;


  } @else if $t==header-insensitive {
    //
    // insensitive header-bar button
    //
    label, & {
      color: transparentize($header_fg, 0.45);
    }

    background-color: transparentize($header_bg, 1);
    border-color: transparentize($header_bg, 1);
  } @else if $t==header-insensitive-active {
    //
    // header-bar insensitive pushed button
    //
    color: transparentize($selected_fg_color, 0.25);
    //border-color: transparentize($highlight_color, 0.35);
    //background-color: transparentize($highlight_color, 0.35);

    border-color: transparentize($header_button_border, 0.25);
    background-color: transparentize(lighten($header_button_border, 9%), 0.25);

  }
  //endregion


  //region -- OSD

  @if $t==osd {
    //
    // normal osd button
    //
    color: $osd_fg_color;
    border-color: $osd_button_border;
    background-color: $osd_button_bg;
  } @else if $t==osd-hover {
    //
    // active osd button
    //
    color: $osd_fg_color;
    border-color: $osd_button_border;
    background-color: shade($osd_button_bg, 1.05);
  } @else if $t==osd-active {
    //
    // active osd button
    //
    color: $osd_fg_color;
    border-color: $osd_button_border;
    //background-color: lighten($osd_button_border, 3%);
    background-color: shade($osd_button_bg, 0.05);
  } @else if $t==osd-insensitive {

    //
    // insensitive osd button
    //
    color: $osd_insensitive_fg_color;
    border-color: $osd_button_border;
    background-color: transparentize($osd_button_bg, 0.15);

  }
  //endregion



  @if $t==suggested_destructive {
    background-clip: border-box;

    color: $actionb_fg;
    background-color: $actionb_bg;
    border-color: $borders_color;

  } @else if $t==undecorated {
    // reset
    border-color: transparent;
    background-color: transparent;
    background-image: none;
  }
}
//endregion


//
// Overshoot
//
@mixin overshoot($p, $c:$highlight_color) {
  // $p: position
  // $c: base color
  //
  // possible $p values:
  // top, bottom, right, left
  //

  $_big_gradient_length: 60%;

  $_position: center top;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==bottom {
    $_position: center bottom;
  } @else if $p==right {
    $_position: right center;
    $_big_gradient_size: $_big_gradient_length 100%;
  } @else if $p==left {
    $_position: left center;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  background-image: -gtk-gradient(radial,
          $_position, 0,
          $_position, 0.6,
          from(transparentize($c, 0.8)),
          to(transparentize($c, 1)));

  background-size: $_big_gradient_size;
  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none; //
  box-shadow: none; //
}

//
// Undershoot
//
@mixin undershoot($p) {
  // $p: position
  //
  // possible $p values:
  // top, bottom, right, left
  //

  $_undershoot_color_dark: transparentize(black, 0.8);
  $_undershoot_color_light: transparentize(white, 0.8);

  $_gradient_dir: left;
  $_dash_bg_size: 10px 1px;
  $_gradient_repeat: repeat-x;
  $_bg_pos: center $p;

  background-color: transparent; // shouldn't be needed, but better to be sure;

  @if ($p == left) or ($p == right) {
    $_gradient_dir: top;
    $_dash_bg_size: 1px 10px;
    $_gradient_repeat: repeat-y;
    $_bg_pos: $p center;
  }

  background-image: linear-gradient(to $_gradient_dir, // this is the dashed line
          $_undershoot_color_light 50%,
          $_undershoot_color_dark 50%);

  padding-#{$p}: 1px;
  background-size: $_dash_bg_size;
  background-repeat: $_gradient_repeat;
  background-origin: content-box;
  background-position: $_bg_pos;
  border: none;
}
